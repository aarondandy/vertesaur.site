@using DandyDoc.CodeDoc
@inherits ServiceStack.Razor.ViewPage<CodeDocType>
@{
  Layout = "_ApiDocsLayout";

  var isEnum = Model.IsEnum.GetValueOrDefault();
  
  // get and filter all the member sets for the type
  var memberSets = new[] {
    new {Title = "Nested Types", Members = Model.NestedTypes},
    new {Title = "Delegates", Members = Model.NestedDelegates},
    new {Title = "Constructors", Members = Model.Constructors},
    new {Title = "Properties", Members = Model.Properties},
    new {Title = "Fields", Members = Model.Fields},
    new {Title = "Methods", Members = Model.Methods},
    new {Title = "Events", Members = Model.Events},
    new {Title = "Operators", Members = Model.Operators}
  }.Where(set => set.Members != null && set.Members.Count > 0).ToList();

  // special handling for enum types
  if (isEnum) {
    // if the type is an enumeration we must show only the fields
    var fieldMemberSet = memberSets.FirstOrDefault(ms => ms.Title == "Fields");
    memberSets.Clear();
    if (fieldMemberSet != null) {
      // the member set title should be changed
      memberSets.Add(new {Title = "Values", fieldMemberSet.Members});
    }
  }
  
  if (!isEnum && (Model.HasBaseChain || Model.HasInterfaces)) {
    <section>
      <h2>Inheritance</h2>
      @if (Model.HasBaseChain) {
        <dl>
          <dt>Base Types</dt>
          <dd>@{Html.Partial("PartialCodeDocEntityList", Model.BaseChain);}</dd>
        </dl>
      }
      @if (Model.HasInterfaces) {
        <dl>
          <dt>Implements</dt>
          <dd>@{Html.Partial("PartialCodeDocEntityList", Model.Interfaces);}</dd>
        </dl>
      }
    </section>
  }

  if (!isEnum && Model.HasGenericParameters) {
    <section>
      <h2>Generic Parameters</h2>
      @{ Html.Partial("PartialCodeDocGenericParameterList", Model.GenericParameters); }
    </section>
  }

  foreach (var memberSet in memberSets) {
    <section>
      <h2>@memberSet.Title</h2>
      @{ Html.Partial("PartialCodeDocEntityTable", memberSet.Members); }
    </section>
  }
  
}